<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
               "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<mapper namespace="resume_mapper">

	<!-- 이력서id res1, res2, res3 ... -->
	<select id="selectNextResumeId" resultType="String">
		SELECT 'res' ||
		TO_CHAR(resume_id_seq.NEXTVAL) AS next_resume_id FROM dual;
	</select>

	<!-- 이력서 저장 -->
	<insert id="saveResume" parameterType="Resume">
		INSERT INTO resume_info
		(resume_id, user_id, jobs_id, career_id,
		academic_id, certificate_id,
		support_path, military_serviceMatters,
		veterans_targetStatus,
		disorderStatus, submissionStatus, revisionDate)
		VALUES (
		'res' ||
		TO_CHAR(resume_id_seq.NEXTVAL),
		#{userId}, #{jobsId}, #{careerId},
		#{academicId},
		#{certificateId}, #{supportPath},
		#{military_serviceMatters},
		#{veterans_targetStatus},
		#{disorderStatus}, #{submissionStatus},
		#{revisionDate}
		)
	</insert>


	<!-- 이력서ID로 검색 -->
	<select id="findResumeByResumeId" resultType="Resume"
		parameterType="String">
    <![CDATA[
 SELECT r.*, u.*, jp.*, c.*, e.*, cer.*, js.*, q.*,
      EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(u.birth, 'RR/MM/DD')) +
     CASE WHEN TO_DATE(u.birth, 'RR/MM/DD') <= TRUNC(SYSDATE, 'YEAR') THEN
     0 ELSE -1 END AS age,
     CASE WHEN c.car_id IS NULL THEN '신입'
     ELSE '경력' END AS career
	FROM resume_info r
	JOIN job_customer u ON r.user_id = u.user_id
	JOIN job_posting jp ON r.posting_id = jp.posting_id
	LEFT JOIN career c ON r.career_id = c.career_id
	JOIN education e ON r.academic_id = e.academic_id
	JOIN certificate cer ON r.certificate_id = cer.certificate_id
	JOIN jobs js ON jp.jobs_id = js.jobs_id
	JOIN job_question q ON q.answer_id = r.answer_id
	
	WHERE submission_status = '제출'
	AND resume_id = #{resumeId}
	  ]]>
	</select>

	<!-- 이력서 검색 -->
	<select id="findResumeList" resultType="Resume">
      <![CDATA[
    SELECT
      r.resume_id AS resume_id,
      js.jobs_name AS jobs_name,
      jp.title AS title,
      u.name AS name,
      EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(u.birth, 'RR/MM/DD')) +
      CASE WHEN TO_DATE(u.birth, 'RR/MM/DD') <= TRUNC(SYSDATE, 'YEAR') THEN
      0 ELSE -1 END AS age,
      e.SORTATION AS education,
      CASE WHEN c.car_id IS NULL THEN '신입'
      ELSE '경력' END AS career,
      r.revision_date AS revision_date,
      r.submission_status AS submission_status
    FROM resume_info r
      JOIN job_customer u ON r.user_id = u.user_id
      JOIN job_posting jp ON r.posting_id = jp.posting_id
      LEFT JOIN career c ON r.career_id = c.career_id
      JOIN education e ON r.academic_id = e.academic_id
      JOIN certificate cer ON r.certificate_id = cer.certificate_id
      JOIN jobs js ON jp.jobs_id = js.jobs_id
    WHERE submission_status = '제출'
  ]]>
	</select>

	<!-- 이력서 목록 가져오기 -->
	<select id="findResumesByUserId" resultType="Resume"
		parameterType="String">
		SELECT *
		FROM resume_info
		WHERE user_id = #{userId}
	</select>

	<select id="findSubmissionResume" resultType="Resume" parameterType="String">
		select * from resume_info where user_id = #{userId} 
		and submission_status = '제출'
	</select>
	
	<select id="findNotSubmissionResume" resultType="Resume" parameterType="String">
		select * from resume_info r, job_posting j where user_id = #{userId} and r.posting_id = j.posting_id
		and submission_status = '비제출'
	</select>
	
	<select id="findSubmissionResumeByPostingId" resultType="Resume" parameterType="String">
		select * from resume_info r, job_posting j where posting_id = #{postingId} 
		and r.posting_id = j.posting_id and submission_status = '제출'
	</select>
	

	<!-- 이력서 수정 -->
	<update id="modifyResume" parameterType="Resume">
		UPDATE resume_info
		<!-- 제출여부 -->
		SET submission_status = #{submissionStatus},
		revision_date =
		#{revisionDate}
		WHERE
		resume_id = #{resumeId}
	</update>

	<!-- 관리자 이력서 업데이트 -->
	<update id="updateResume" parameterType="Resume">
		UPDATE job_customer
		SET
		email = #{email},
		phone = #{phone},
		birth = #{birth},
		password = #{password}
		WHERE user_id = #{userId}
	</update>


	<!-- 직무아이디로 찾기 -->
	<select id="findResumesByCareerId" resultType="Resume"
		parameterType="String">
		SELECT *
		FROM resume_info
		WHERE careerId = #{careerId}
	</select>

	<select id="findResumeListBySearchCondition" resultType="Resume"
		parameterType="ResumeSearchCondition"> 
  	 <![CDATA[
    SELECT
      r.resume_id AS resume_id,    
      js.jobs_name AS jobs_name,
      jp.title AS title,
      u.name AS name,
      EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(u.birth, 'RR/MM/DD')) +
      CASE WHEN TO_DATE(u.birth, 'RR/MM/DD') <= TRUNC(SYSDATE, 'YEAR') THEN
      0 ELSE -1 END AS age,
      e.SORTATION AS education,
      CASE WHEN c.car_id IS NULL THEN '신입'
      ELSE '경력' END AS career,
      r.revision_date AS revision_date,
      r.submission_status AS submission_status
    FROM resume_info r
      JOIN job_customer u ON r.user_id = u.user_id
      JOIN job_posting jp ON r.posting_id = jp.posting_id
      LEFT JOIN career c ON r.career_id = c.career_id
      JOIN education e ON r.academic_id = e.academic_id
      JOIN certificate cer ON r.certificate_id = cer.certificate_id
      JOIN jobs js ON jp.jobs_id = js.jobs_id
       WHERE submission_status = '제출']]>
		AND 1=1

		<!-- 검색어 sfl -->
		<if test="searchKeyword != null and !searchKeyword.isEmpty()">
			<choose>
				<when test="sfl == 'title'">
					AND jp.title LIKE '%' || #{searchKeyword} || '%'
				</when>
				<when test="sfl == 'user_id'">
					AND u.user_id = #{searchKeyword}
				</when>
				<when test="sfl == 'name'">
					AND u.name LIKE '%' || #{searchKeyword} || '%'
				</when>
				<when test="sfl == 'phone'">
					AND u.phone = #{searchKeyword}
				</when>
				<when test="sfl == 'email'">
					AND u.email LIKE '%' || #{searchKeyword} || '%'
				</when>
			</choose>
		</if>

		<!-- 지원일자(revision_date) resume_info테이블의 applied_date가 설정한 시작일fr_date부터 
			종료일to_date까지의 기간 내 포함되는 이력서 노출 지원마감일(revision_date)이 설정한 시작일fr_date부터 종료일to_date까지의 
			기간 내 포함되는 이력서 노출 -->
		<if test="spt == 'revisionDate'">

			<if test="startDate != null and startDate != ''">
				AND TO_DATE(r.revision_date, 'YYYY-MM-DD') >=
				TO_DATE(#{startDate}, 'YYYY-MM-DD')
			</if>
			<if test="endDate != null and endDate != ''">
				<![CDATA[AND TO_DATE(r.revision_date, 'YYYY-MM-DD') <= TO_DATE(#{endDate}, 'YYYY-MM-DD')]]>
			</if>

		</if>

		<!-- 성별(user테이블의 gender. user테이블의 user_id = resume_info테이블의 user_id ) -->
		<!-- 전체를 선택한 경우 남녀 모두 -->
		<if test="gender != null and gender != ''">
			AND u.gender = #{gender}
		</if>

		<!-- 생년월일로 나이 계산 -->
		<if test="startAge != null and startAge != ''">
			AND (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM
			TO_DATE(u.birth, 'RR/MM/DD'))) >= ${startAge}
		</if>
		<if test="endAge != null and endAge != ''">
			AND (EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM
			TO_DATE(u.birth, 'RR/MM/DD'))) &lt;= ${endAge}
		</if>

		<!-- 경력조건 -->
		<if test="career != null and career != ''">
			AND (CASE WHEN c.car_id IS NULL THEN '신입' ELSE '경력' END
			<choose>
				<when test="career == '신입'">
					= '신입'
				</when>
				<when test="career == '경력'">
					= '경력'
				</when>
			</choose>
			)
		</if>
	</select>


	<!-- 이력서 삭제 -->
	<delete id="deleteResume" parameterType="String">
		DELETE FROM resume_info
		WHERE resume_id = #{resumeId}
	</delete>



	</mapper>
